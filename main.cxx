// Std
#include <cstdint>
#include <filesystem>
#include <fstream>
#include <iostream>
#include <string>

constexpr const char *Indent = "    ";
constexpr uint32_t BytesPerLine = 32;

int WriteFile(const std::string &inputFilePath, const std::string &outputFilePath);

int main(int argc, char **argv)
{
    if (argc < 2)
    {
        std::cout << "Usage:" << std::endl;
        std::cout << "bin2code <file> [outputFile]" << std::endl;
        return EXIT_FAILURE;
    }

    const std::string inputFilePath = argv[1];
    const std::string outputFilePath = argc == 2 ? inputFilePath + ".hxx" : std::string(argv[2]);

    return WriteFile(inputFilePath, outputFilePath);
}

int WriteFile(const std::string &inputFilePath, const std::string &outputFilePath)
{
    std::ifstream inputFile(inputFilePath, std::ios::binary | std::ios::ate);
    std::ofstream outputFile(outputFilePath, std::ios::binary | std::ios::trunc);

    if (!inputFile.is_open())
    {
        std::cout << "Failed to open input file: " << inputFilePath << std::endl;
        return EXIT_FAILURE;
    }

    if (!outputFile.is_open())
    {
        std::cout << "Failed to open output file: " << outputFilePath << std::endl;
        return EXIT_FAILURE;
    }

    const auto fileSize = inputFile.tellg();
    const auto fileSizeInBytes = static_cast<uint64_t>(fileSize);

    inputFile.seekg(0);

    outputFile << "// ************************************" << std::endl;
    outputFile << "// This file was generated by bin2code." << std::endl;
    outputFile << "// ************************************" << std::endl;
    outputFile << "#pragma once" << std::endl;
    outputFile << std::endl;
    outputFile << "#include <array>" << std::endl;
    outputFile << "#include <cstdint>" << std::endl;
    outputFile << std::endl;

    const auto inputFileSystemPathFilename = std::filesystem::path(inputFilePath).filename().string();
    const auto outputVariableName = inputFileSystemPathFilename.substr(0, inputFileSystemPathFilename.find_first_of('.'));

    outputFile << "// Binary content of " << inputFileSystemPathFilename << std::endl;

    outputFile << "constexpr std::array<const uint8_t, " << fileSizeInBytes << "> " << outputVariableName << std::endl;
    outputFile << "{";

    uint64_t index = 0;
    while (true)
    {
        const auto byte = inputFile.get();
        if (inputFile.eof()) break;

        if ((index++ % BytesPerLine) == 0)
        {
            outputFile << std::endl
                       << Indent;
        }

        outputFile << "0x" << std::hex << std::setfill('0') << std::setw(2) << static_cast<uint32_t>(byte) << ((index % BytesPerLine) == 0 ? "," : ", ");
    }

    outputFile << std::endl
               << "};" << std::endl;

    return EXIT_SUCCESS;
}
